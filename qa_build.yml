# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - qa

variables:
  - group: BuildVariables
  - name: buildConfiguration
    value: 'Release'
  - name: outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/output'
  - name: codesignKey
    value: 'Apple Distribution: kevin Ford (B4XFLSJ3F4)'
  - name: packagesignKey
    value: '3rd Party Mac Developer Installer: kevin Ford (B4XFLSJ3F4)'
  - name: codesignProvisioningProfileiOS
    value: 'LinkedIn Learning QRTracker'
  - name: codesignProvisioningProfileMac
    value: 'LinkedIn Learning QRTracker Mac'
  - name: keyStoreName
    value: 'LinkedInClass.ks'

jobs:
- job: Build_Main
  displayName: 'Build Main'
  pool:
    vmImage: 'macos-latest'
    demands: xcode

  steps:

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '9.x'

  - task: CmdLine@2
    displayName: "dotnet workload restore"
    inputs:
      script: 'dotnet workload restore'

#  - task: CmdLine@2
#    displayName: "Selects a specific version of Xcode"
#    inputs:
#      script: 'sudo xcode-select -s /Applications/Xcode_16.2.app'

#  - task: InstallAppleCertificate@2
#    displayName: 'Add distribution certificate'
#    inputs:
#      certSecureFile: 'AppleDistributionCertificate.p12'
#      certPwd: '$(iOSCertPassword)'
      
#  - task: InstallAppleCertificate@2
#    displayName: 'Add installer certificate'
#    inputs:
#      certSecureFile: 'AppleMacInstallerCertificate.p12'
#      certPwd: '$(iOSCertPassword)'
  
#  - task: InstallAppleProvisioningProfile@1
#    displayName: 'Add iOS provisioning profile'
#    inputs:
#      provProfileSecureFile: 'LinkedIn_Learning_QRTracker.mobileprovision'

#  - task: InstallAppleProvisioningProfile@1
#    displayName: 'Add MacOS provisioning profile'
#    inputs:
#      provProfileSecureFile: 'LinkedIn_Learning_QRTracker_Mac.provisionprofile'

#  - task: DotNetCoreCLI@2
#    displayName: 'Build project for iOS'
#    inputs:
#      command: publish
#      publishWebProjects: false
#      projects: 'QRTracker/QRTracker.csproj'
#      arguments: '-f net9.0-ios --configuration $(buildConfiguration) 
#      --output $(outputDirectory)/iOS -p:CodesignKey="$(codesignKey)" 
#      -p:CodesignProvision="$(codesignProvisioningProfileiOS)" 
#      -p:CodesignEntitlements="Platforms/iOS/Entitlements.plist" 
#      /p:ArchiveOnBuild=true /p:EnableAssemblyILStripping=false
#      /p:ApplicationDisplayVersion=1.0.$(Build.BuildId)
#      /p:ApplicationVersion=1.0.$(Build.BuildId)'
#      zipAfterPublish: false
#    env:
#      DISABLE_BITCODE: 'yes'
  
#  - task: CopyFiles@2
#    displayName: 'Copy iOS file from Build to Staging'
#    inputs:
#      SourceFolder: '$(outputDirectory)/iOS/QRTracker'
#      Contents: 'QRTracker.ipa'
#      TargetFolder: '$(Build.ArtifactStagingDirectory)/iOSStaging'
#      CleanTargetFolder: true
#      OverWrite: true

#  - task: PublishBuildArtifacts@1
#    displayName: 'Publish iOS the Staging Files.'
#    inputs:
#      PathtoPublish: '$(Build.ArtifactStagingDirectory)/iOSStaging'
#      ArtifactName: 'drop'
#      publishLocation: 'Container'
  
#  - task: AppStoreRelease@1
#    displayName: 'Push iOS app to App Store Connect'
#    inputs:
#      serviceEndpoint: 'Apple App Store Connect'
#      releaseTrack: 'TestFlight'
#      appIdentifier: 'com.linkedinlearning.qrtracker'
#      ipaPath: '$(build.artifactstagingdirectory)/iOSStaging/*.ipa'
#      appType: 'iOS'
#      shouldSkipWaitingForProcessing: true
#      shouldSkipSubmission: true
#      appSpecificId: '6743451240'

#  - task: DotNetCoreCLI@2
#    displayName: 'Build project for MacOS'
#    inputs:
#      command: publish
#      publishWebProjects: false
#      projects: 'QRTracker/QRTracker.csproj'
#      arguments: '-f net9.0-maccatalyst --configuration $(buildConfiguration) 
#      --output $(outputDirectory)/MacOS -p:CodesignKey="$(codesignKey)" 
#      -p:CodesignProvision="$(codesignProvisioningProfileMac)" 
#      -p:EnablePackageSigning=true
#      -p:PackageSigningKey="$(packagesignKey)"
#      -p:CodesignEntitlements="Platforms/MacCatalyst/Entitlements.plist" 
#      /p:ArchiveOnBuild=true /p:EnableAssemblyILStripping=false
#      /p:ApplicationDisplayVersion=1.0.$(Build.BuildId)
#      /p:ApplicationVersion=1.0.$(Build.BuildId)'
#      zipAfterPublish: false
#    env:
#        DISABLE_BITCODE: 'yes'

#  - task: CopyFiles@2
#    displayName: 'Copy MacOS file from Build to Staging'
#    inputs:
#        SourceFolder: '$(outputDirectory)/MacOS/QRTracker'
#        Contents: 'QRTracker*.pkg'
#        TargetFolder: '$(Build.ArtifactStagingDirectory)/MacOSStaging'
#        CleanTargetFolder: true
#        OverWrite: true
#  - task: PublishBuildArtifacts@1
#    displayName: 'Publish the MacOS Staging Files.'
#    inputs:
#        PathtoPublish: '$(Build.ArtifactStagingDirectory)/MacOSStaging'
#        ArtifactName: 'drop'
#        publishLocation: 'Container'

#  - task: AppStoreRelease@1
#    displayName: 'Push MacOS app to App Store Connect'
#    inputs:
#        serviceEndpoint: 'Apple App Store Connect'
#        releaseTrack: 'TestFlight'
#        appIdentifier: 'com.linkedinlearning.qrtracker'
#        ipaPath: '$(build.artifactstagingdirectory)/MacOSStaging/*.pkg'
#        appType: 'macOS'
#        shouldSkipWaitingForProcessing: true
#        shouldSkipSubmission: true
#        appSpecificId: '6743451240'
      
  - task: DownloadSecureFile@1
    displayName: Download keystore file 
    name: keystore
    inputs:
      secureFile: '$(keyStoreName)'
  
  - task: CopyFiles@2
    displayName: 'Copy MacOS file from Build to Staging'
    inputs:
        SourceFolder: '$(keystore.secureFilePath)'
        Contents: '$(keyStoreName)'
        TargetFolder: '$(System.DefaultWorkingDirectory)'
        CleanTargetFolder: true
        OverWrite: true
        
  - task: DotNetCoreCLI@2
    displayName: 'Build project for Android'
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'QRTracker/QRTracker.csproj'
      arguments: '-f net9.0-android --configuration $(buildConfiguration) 
      --output $(outputDirectory)/MacOS -p:CodesignKey="$(codesignKey)" 
      -p:CodesignProvision="$(codesignProvisioningProfileMac)" 
      /p:ApplicationDisplayVersion=1.0.$(Build.BuildId)
      /p:ApplicationVersion=1.0.$(Build.BuildId)
      /p:AndroidSigningKeyPass=$(KeyStorePassword) 
      /p:AndroidSigningStorePass=$(KeyStorePassword) 
      /p:AndroidSigningKeyStore=$(System.DefaultWorkingDirectory)\\$(keyStoreName) 
      /p:AndroidSigningKeyAlias=$(KeyStoreAlias) 
      /p:AndroidKeyStore=true'
      zipAfterPublish: false
      
  - task: CopyFiles@2
    displayName: Copy APK and AAB
    inputs:
      Contents: |
        **\*Signed.apk
        **\*Signed.aab
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
